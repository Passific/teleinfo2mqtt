name: App-build-test-push

on:
  push:
  release:
    types: [released, prereleased]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        node-version: [ 20, 22 ]
    defaults:
      run:
        working-directory: ./app
    name: Test with node ${{ matrix.node-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: ./app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Run UT
        run: npm test

  coverage:
    needs: [ test ]
    if: ${{ needs.test.result == 'success' }}
    name: Test Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Code Climate test reporter
        env:
#          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          CC_TEST_REPORTER_ID: 5167fc209c026a59fa2f9e21c7e21efa2ce09989a62ca8bc775f2240d8b9f662
        run: |
          curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
          chmod +x ./cc-test-reporter
          ./cc-test-reporter before-build

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./app/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Run UT
        run: npm test

      - name: Code Climate test reporter
        env:
#          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          CC_TEST_REPORTER_ID: 5167fc209c026a59fa2f9e21c7e21efa2ce09989a62ca8bc775f2240d8b9f662
          GIT_BRANCH: ${{github.event.workflow_run.head_branch }}
          GIT_COMMIT_SHA: ${{github.event.workflow_run.head_commit.id }}
        run: ./cc-test-reporter after-build -t lcov --debug --exit-code $?

  build-and-push-image:
    needs: test
    if: ${{ needs.test.result == 'success' }}
    name: Build ${{ (github.event.action == 'released' || github.event.action == 'prereleased') && 'and push ' || '' }}image for ${{ matrix.platform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/386
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64/v8
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3.3.0
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase repo name
        run: |
          echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
          platforms: ${{ matrix.platform }}
          tags: ghcr.io/${{ env.REPO }}:${{ github.ref_name }},ghcr.io/${{ env.REPO }}:develop${{ github.event.action == 'released' && format(',ghcr.io/{0}:latest', env.REPO) || '' }}
          build-args: |
            IMAGE_DATE=${{ github.event.repository.updated_at }}
            IMAGE_REF=$(git rev-parse --short HEAD)
            IMAGE_VERSION=${{ github.ref_name }}
            IMAGE_NAME=${{ env.REPO }}
